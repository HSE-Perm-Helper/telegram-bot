import enum

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from api import user_service, verification_service
from decorator.decorators import typing_action
from exception.verification.cannot_resent_email_by_attempts_exception import CanNotResentEmailByAttemptsException
from exception.verification.cannot_resent_email_by_delay_exception import CannotResentEmailByDelayException
from exception.verification.invalid_email_format_exception import InvalidEmailFormatException
from exception.verification.user_already_exists_with_this_email_exception import UserAlreadyExistsWithThisEmailException
from exception.verification.verification_request_not_found_exception import VerificationRequestNotFoundException
from routes.settings import shared
from routes.settings.shared import SettingsCallback
from util.utils import number_format

router = Router()

class EmailSettingsCallback(enum.Enum):
    SET_EMAIL = "SET_EMAIL"
    RESENT_VERIFICATION = "RESENT_VERIFICATION"
    DELETE_EMAIL = "DELETE_EMAIL"
    BACK_TO_SETTINGS = "BACK"
    DONE = "DONE"
    CANCEL = "CANCEL"

class EmailSettingsState(StatesGroup):
    EMAIL_INFO = State()
    EMAIL_EDIT = State()


@router.callback_query(F.data == SettingsCallback.EMAIL_SETTINGS.value)
@typing_action
async def email_settings(query: CallbackQuery, state: FSMContext):
    await query.answer()

    user = await user_service.get_user(query.from_user.id)
    email: str | None = user["email"]

    await state.set_state(EmailSettingsState.EMAIL_INFO)

    if isinstance(email, str):
        return await email_settings_when_email_exists(email, query, state)

    return await email_settings_when_email_not_set(query, state)


async def email_settings_when_email_exists(email: str, query: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=EmailSettingsCallback.SET_EMAIL.value)
    keyboard.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=EmailSettingsCallback.DELETE_EMAIL.value)
    keyboard.button(text="‚¨ÖÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=EmailSettingsCallback.BACK_TO_SETTINGS.value)
    keyboard.adjust(2, repeat=True)

    text = (f"üìß *–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞: {email}*\n\
\n\
üîπ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –≤—ã–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\
üîπ –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å Telegram, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É")
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
    await query.message.edit_reply_markup(reply_markup=keyboard.as_markup())


async def email_settings_when_email_not_set(query: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîë –ü—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=EmailSettingsCallback.SET_EMAIL.value)
    keyboard.button(text="‚¨ÖÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=EmailSettingsCallback.BACK_TO_SETTINGS.value)
    keyboard.adjust(1)

    text = ("üìß *–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞*\n\
\n\
üîπ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–∑–≤–æ–ª–∏—Ç –±–æ—Ç—É –≤—ã–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\
üîπ –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å Telegram, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É")
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
    await query.message.edit_reply_markup(reply_markup=keyboard.as_markup())


@router.callback_query(F.data == EmailSettingsCallback.BACK_TO_SETTINGS.value)
async def back_to_settings(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await shared.back_to_settings(query, state)


@router.callback_query(F.data == EmailSettingsCallback.DONE.value)
async def done_settings(query: CallbackQuery, state: FSMContext):
    await query.answer("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await state.clear()
    await query.message.delete()


@router.callback_query(F.data == EmailSettingsCallback.CANCEL.value)
async def cancel_settings(query: CallbackQuery, state: FSMContext):
    await query.answer("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ—á—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await query.message.delete()


@router.callback_query(F.data == EmailSettingsCallback.SET_EMAIL.value)
async def email_set_or_update(query: CallbackQuery, state: FSMContext):
    await query.answer()

    text = ("*–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:*\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É –ª–∏—á–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, name@edu.hse.ru)")
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=EmailSettingsCallback.CANCEL.value)

    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
    await query.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await state.set_state(EmailSettingsState.EMAIL_EDIT)


@router.message(EmailSettingsState.EMAIL_EDIT)
async def email_set_or_update_attempt(message: Message, state: FSMContext):
    await message.delete()

    try:
        verification_info = await user_service.set_or_update_user_email(message.from_user.id, message.text)

        text = (f"‚úÖ *–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –±—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—á—Ç—É {message.text}* \n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π email")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
                        callback_data=f"{EmailSettingsCallback.RESENT_VERIFICATION.value}{verification_info.token}")
        keyboard.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=EmailSettingsCallback.DONE.value),
                     InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=EmailSettingsCallback.CANCEL.value))

        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.MARKDOWN)
        await state.clear()

    except InvalidEmailFormatException:
        text = ("*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã üòî*\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É –ª–∏—á–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, name@edu.hse.ru)")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=EmailSettingsCallback.CANCEL.value)

        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.MARKDOWN)

    except UserAlreadyExistsWithThisEmailException:
        text = ("*–≠—Ç–∞ –ø–æ—á—Ç–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üòî*\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É –ª–∏—á–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, name@edu.hse.ru)")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=EmailSettingsCallback.CANCEL.value)

        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.MARKDOWN)


@router.callback_query(F.data.startswith(EmailSettingsCallback.RESENT_VERIFICATION.value))
async def email_resent(query: CallbackQuery, state: FSMContext):
    token = query.data.replace(EmailSettingsCallback.RESENT_VERIFICATION.value, "")

    try:
        await verification_service.resend_verification(token)
        await query.answer("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except CannotResentEmailByDelayException as e:
        formatted_seconds = number_format(e.delay, "—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥")
        await query.answer(f"üí° –ü–∏—Å—å–º–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {formatted_seconds}")
    except CanNotResentEmailByAttemptsException as e:
        await query.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
    except VerificationRequestNotFoundException:
        await query.answer("üòî –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏—Å—Ç–µ–∫, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ")
        await query.message.delete()

@router.callback_query(F.data == EmailSettingsCallback.DELETE_EMAIL.value)
async def email_delete(query: CallbackQuery, state: FSMContext):
    await user_service.delete_user_email(query.from_user.id)

    await query.answer("‚úÖ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞")
    await email_settings_when_email_not_set(query, state)
