import random

from aiogram import Router, types
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from api import api
from constants import constant
from decorator.decorators import typing_action
from message.common_messages import SUCCESS_REGISTER, SUCCESS_DATA_CHANGING
from routes import menu

router = Router()


# –†–∞–Ω–¥–æ–º–Ω—ã–π –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
def rand_emj(count):
    return random.randint(0, count - 1)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
async def get_course(message: Message, is_new_user: bool):
    if is_new_user:
        text_hello = "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üëã –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    else:
        text_hello = "–ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–º –¥–∞–Ω–Ω—ã–µ. ‚úè –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    courses = await api.get_courses()
    random.shuffle(constant.emojies_for_course)

    keyboard = InlineKeyboardBuilder()

    for i in range(len(courses)):
        emoji_for_button = f"{constant.emojies_for_course[i]} {courses[i]} –∫—É—Ä—Å"
        keyboard.row(types.InlineKeyboardButton(text=emoji_for_button,
                                                callback_data=f"course_{courses[i]}"
                                                              f"^{is_new_user}"))

    await message.answer(text_hello, reply_markup=keyboard.as_markup())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def get_program(message: Message, data):
    number_course, is_new_user = data.split('^')
    number_course = int(number_course)
    text_get_course = f"–¢—ã –≤—ã–±—Ä–∞–ª {number_course} –∫—É—Ä—Å! üéâ –ù–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è?"
    random.shuffle(constant.emojies_for_programs)
    programs = await api.get_programs(number_course)

    keyboard = InlineKeyboardBuilder()

    for i in range(len(programs)):
        if programs[i] in constant.type_of_program_dict.keys():
            emoji_for_button = (f"{constant.emojies_for_programs[i]} "
                                f"{constant.type_of_program_dict[programs[i]]}")
        else:
            emoji_for_button = (f"{constant.emojies_for_programs[i]}"
                                f"{programs[i]}")
        keyboard.row(types.InlineKeyboardButton(text=emoji_for_button,
                                                callback_data=f"program_{programs[i]}"
                                                              f"^{number_course}"
                                                              f"^{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                                            callback_data=f"back_to_start{is_new_user}"))

    await message.answer(text_get_course, reply_markup=keyboard.as_markup())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
async def get_group(message: Message, data):
    program, course, is_new_user = data.split('^')
    if program in constant.type_of_program_dict.keys():
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª: \n{constant.type_of_program_dict[program]} üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"
    else:
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª {program} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"
    random.shuffle(constant.emojies_for_groups)
    groups = await api.get_groups(course,
                                  program)

    keyboard = InlineKeyboardBuilder()
    for i in range(len(groups)):
        emoji_for_button = f"{constant.emojies_for_groups[i]} {groups[i]}"
        keyboard.row(types.InlineKeyboardButton(text=emoji_for_button,
                                                callback_data=f"group_{groups[i]}"
                                                              f"^{program}"
                                                              f"^{course}"
                                                              f"^{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                                            callback_data=f"back_to_program{course}"
                                                          f"^{is_new_user}"))

    await message.answer(text_get_group, reply_markup=keyboard.as_markup())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
async def get_subgroup(message: Message, data):
    group, program, course, is_new_user = data.split('^')

    text_get_subgroup = f"{group} ‚Äî —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞. –û—Å—Ç–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π!"

    subgroups = await api.get_subgroups(course,
                                        program,
                                        group)
    keyboard = InlineKeyboardBuilder()
    for i in range(len(subgroups)):
        emoji_for_button = f"{constant.emojies_for_subgroups[rand_emj(len(constant.emojies_for_subgroups))]} {subgroups[i]}"
        keyboard.row(types.InlineKeyboardButton(text=emoji_for_button,
                                                callback_data=f"subgroup_{subgroups[i]}"
                                                              f"^{group}"
                                                              f"^{program}"
                                                              f"^{course}"
                                                              f"^{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="üö´ –ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã",
                                            callback_data=f"subgroup_None"
                                                          f"^{group}"
                                                          f"^{program}"
                                                          f"^{course}"
                                                          f"^{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                                            callback_data=f"back_to_group{program}"
                                                          f"^{course}"
                                                          f"^{is_new_user}"))

    await message.answer(text_get_subgroup, reply_markup=keyboard.as_markup())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
async def get_confirmation(message: Message, data):
    subgroup, group, program, course, is_new_user = data.split('^')

    '''–ó–∞–≤–æ–¥–∏–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'''
    if program in constant.type_of_program_dict.keys():
        program_for_message = constant.type_of_program_dict[program]
    else:
        program_for_message = program

    '''–î–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π –∏ –±–µ–∑ –Ω–µ–µ'''
    if subgroup == "None":
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{course}-–π –∫—É—Ä—Å,\n"
                             f"{program_for_message},\n"
                             f"{group} ‚Äî –≥—Ä—É–ø–ø–∞,"
                             f"\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")
    else:
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{course}-–π –∫—É—Ä—Å,\n"
                             f"{program_for_message},\n"
                             f"{group} ‚Äî –≥—Ä—É–ø–ø–∞,\n"
                             f"{subgroup} ‚Äî –ø–æ–¥–≥—Ä—É–ø–ø–∞.\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ! üéâüéä",
                                            callback_data=f"start_working{course}"
                                                          f"^{program}"
                                                          f"^{group}"
                                                          f"^{subgroup}"
                                                          f"^{message.chat.id}"
                                                          f"^{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚úè",
                                            callback_data=f"back_to_start"
                                                          f"{is_new_user}"))
    keyboard.row(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                                            callback_data=f"back_to_subgroup{group}"
                                                          f"^{program}"
                                                          f"^{course}"
                                                          f"^{is_new_user}"))

    await message.answer(text_confirmation, reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@typing_action
@router.callback_query(lambda c: c.data.startswith('course_'))
async def course_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("course_", "")
    await callback_query.message.delete()
    await get_program(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@typing_action
@router.callback_query(lambda c: c.data.startswith('program_'))
async def program_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("program_", "")
    await callback_query.message.delete()
    await get_group(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@typing_action
@router.callback_query(lambda c: c.data.startswith('group_'))
async def group_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("group_", "")
    await callback_query.message.delete()
    await get_subgroup(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
@typing_action
@router.callback_query(lambda c: c.data.startswith('subgroup_'))
async def subgroup_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("subgroup_", "")
    await callback_query.message.delete()
    await get_confirmation(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
@typing_action
@router.callback_query(lambda c: c.data.startswith('back_to_'))
async def program_query_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if callback_query.data.startswith('back_to_program'):
        data = callback_query.data.replace('back_to_program', "")
        await get_program(callback_query.message, data)
    elif callback_query.data.startswith('back_to_group'):
        data = callback_query.data.replace('back_to_group', "")
        await get_group(callback_query.message, data)
    elif callback_query.data.startswith('back_to_subgroup'):
        data = callback_query.data.replace('back_to_subgroup', "")
        await get_subgroup(callback_query.message, data)
    elif callback_query.data.startswith('back_to_start'):
        data = callback_query.data.replace('back_to_start', "")
        await get_course(callback_query.message, data == "True")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@typing_action
@router.callback_query(lambda c: c.data.startswith("start_working"))
async def callback_message(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    data = callback_query.data.replace('start_working', "")
    course, program, group, subgroup, telegram_id, is_new_user = data.split("^")
    is_new_user = True if is_new_user == "True" else False

    if subgroup != "None":
        subgroup = int(subgroup)
    else:
        subgroup = 0

    if is_new_user:
        is_success = await api.registration_user(telegram_id=telegram_id,
                                                 group=group,
                                                 subgroup=subgroup)
    else:
        is_success = await api.edit_user(telegram_id=telegram_id,
                                         group=group,
                                         subgroup=subgroup)

    if is_success:
        if is_new_user:
            await callback_query.answer(text=SUCCESS_REGISTER)
        else:
            await callback_query.answer(text=SUCCESS_DATA_CHANGING)

        await menu.send_help_message(callback_query.message)

    else:
        await callback_query.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. üòî "
                                            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÉ\n"
                                            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–±–µ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "
                                            "/settings !")
