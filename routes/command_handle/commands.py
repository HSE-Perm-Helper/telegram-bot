from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from api import api
from bot import bot
from decorator.decorators import typing_action, exception_handler, required_admin
from routes import menu
from routes.registration import registration
from routes.schedule_handle import schedule_handle
from schedule.schedule_type import ScheduleType

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /registration
@router.message(Command('start', '—Å—Ç–∞—Ä—Ç', '–ø–æ–µ—Ö–∞–ª–∏', 'registration', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
@router.message(lambda F: F.text == ('start' or '—Å—Ç–∞—Ä—Ç' or '–ø–æ–µ—Ö–∞–ª–∏'
                                     or 'registration' or '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
@typing_action
@exception_handler
async def get_registration(message):
    if await api.check_registration_user(message.chat.id):
        await menu.get_help(message, is_need_delete=False)
    else:
        await registration.get_course(message, True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
@router.message(Command('settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
@router.message(lambda F: F.text == ('settings' or '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
@typing_action
@exception_handler
async def get_settings(message):
    await message.delete()
    await registration.get_course(message, False)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@router.message(Command('schedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
@router.message(lambda F: F.text == ('schedule' or '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
@typing_action
@exception_handler
async def get_settings(message):
    await schedule_handle.get_text_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# @bot.message_handler(func= lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
# def callback_message(message):
#     get_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(lambda
                        F: F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üíº" or F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@typing_action
@exception_handler
async def callback_message(message):
    await schedule_handle.get_text_schedule(message)


@router.message(Command('schedule'))
@typing_action
@exception_handler
@required_admin
async def get_remote_schedule(message):
    await bot.delete_message(message.chat.id, message.message_id)
    keyword = InlineKeyboardBuilder()
    link = await api.get_remote_schedule_link(message.chat.id)
    keyword.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", url=link))
    await message.answer(text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–±–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ "
                              "–≤—ã–±—Ä–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å."
                              "–ò –≤—Å—ë. –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É —Ç–µ–±—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!", reply_markup=keyword)


@router.message(Command("base_schedule"))
@router.message(lambda F: F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å üóì")
@typing_action
@exception_handler
async def get_base_schedule(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    schedules_json = await api.get_schedules()
    schedules = list(filter(lambda schedule: schedule["scheduleType"] == ScheduleType.QUARTER_SCHEDULE.value,
                            schedules_json['response']))
    if len(schedules) == 0:
        await message.answer(text="–ü–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –º–æ–¥—É–ª—å –Ω–µ—Ç! üéâüéä")
    else:
        schedule = schedules[0]
        response_schedule = await api.get_schedule(message.chat.id, schedule["start"], schedule["end"])
        await schedule_handle.schedule_sending(message, response_schedule["response"])
