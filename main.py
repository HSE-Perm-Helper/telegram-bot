import random
import datetime
from telebot import types

import api
from bot import bot

import scheduler

# ---------------------------------  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞  ----------------------------------- #

bot.can_join_groups = False  # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã (–µ–º—É –ø–æ—Ñ–∏–≥)

# ---------------------------------  –î–∞–Ω–Ω—ã–µ  ----------------------------------- #

days_of_week_list = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                     '–í—Ç–æ—Ä–Ω–∏–∫',
                     '–°—Ä–µ–¥–∞',
                     '–ß–µ—Ç–≤–µ—Ä–≥',
                     '–ü—è—Ç–Ω–∏—Ü–∞',
                     '–°—É–±–±–æ—Ç–∞',
                     '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

type_of_lessons_dict = {
    'LECTURE': '–ª–µ–∫—Ü–∏—è üò¥',
    'SEMINAR': '—Å–µ–º–∏–Ω–∞—Ä üìó',
    'COMMON_MINOR': '–ú–∞–π–Ω–æ—Ä ‚ìÇ',
    'ENGLISH': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π üÜé',
    'EXAM': '—ç–∫–∑–∞–º–µ–Ω ‚ò†Ô∏è',
    'INDEPENDENT_EXAM': '–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫–∑–∞–º–µ–Ω ‚ò†Ô∏è‚ò†Ô∏è',
    'TEST': '–∑–∞—á—ë—Ç ‚ò†Ô∏è',
    'PRACTICE': '–ø—Ä–∞–∫—Ç–∏–∫–∞ üíº',
    'MINOR': '–ú–∞–π–Ω–æ—Ä ‚ìÇ',
    'COMMON_ENGLISH': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π üÜé',
    'STATEMENT': '–í–µ–¥–æ–º–æ—Å—Ç—å üìú',
    'ICC': '–ú–ö–î üìô',
    'UNDEFINED_AED': '–î–û–¶ –ø–æ –≤—ã–±–æ—Ä—É üìï',
    'AED': '–î–û–¶ üìï',
    'EVENT': '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
}

type_of_program_dict = {
    '–ú–ë': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ',
    '–†–ò–°': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    '–ò': '–ò—Å—Ç–æ—Ä–∏—è',
    '–ò–Ø': '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
    '–Æ': '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è',
    '–£–ë': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º',
    '–≠': '–≠–∫–æ–Ω–æ–º–∏–∫–∞',
    '–ü–ò': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è',
    '–ë–ò': '–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'
}

number_of_pair_dict = {
    '8:10': '1-–∞—è –ø–∞—Ä–∞',
    '9:40': '2-–∞—è –ø–∞—Ä–∞',
    '11:30': '3-–∞—è –ø–∞—Ä–∞',
    '13:10': '4-–∞—è –ø–∞—Ä–∞',
    '15:00': '5-–∞—è –ø–∞—Ä–∞',
    '16:40': '6-–∞—è –ø–∞—Ä–∞',
    '18:20': '7-–∞—è –ø–∞—Ä–∞',
    '20:10': '8-–∞—è –ø–∞—Ä–∞'
}

count_pairs_dict = {
    '1': '1 –ø–∞—Ä–∞ ü•≥',
    '2': '2 –ø–∞—Ä—ã üôÇ',
    '3': '3 –ø–∞—Ä—ã üòê',
    '4': '4 –ø–∞—Ä—ã üòü',
    '5': '5 –ø–∞—Ä üò®',
    '6': '6 –ø–∞—Ä üò±',
    '7': '7 –ø–∞—Ä üòµ',
    '8': '8 –ø–∞—Ä ‚ò†'
}

emojies_for_course = ['üìí', 'üìì', 'üìî', 'üìï', 'üìó', 'üìò', 'üìô']
emojies_for_programs = ['üå∂', 'üçë', 'üçâ', 'üçè', 'üçç', 'ü•≠', 'üçÜ', 'üçê', 'üçã', 'üçá', 'üçí', 'ü•ù', 'ü••']
emojies_for_groups = ['‚ö™', 'üî¥', 'üü°', 'üü¢', 'üü£', 'üü§', 'üîµ', '‚ö´']
emojies_for_subgroups = ['üåÅ', 'üåÉ', 'üåÑ', 'üåÖ', 'üåÜ', 'üåá', 'üåâ']
# emojies_for_number_of_pair = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']
emojies_for_week_color = ['üü•', 'üü™', 'üü¶', 'üü©', 'üüß', 'üü®']

version = "1.01.1-beta"


# ---------------------------------  –§—É–Ω–∫—Ü–∏–∏  ----------------------------------- #


# –†–∞–Ω–¥–æ–º–Ω—ã–π –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
def rand_emj(count):
    return random.randint(0, count - 1)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
def get_course(message, is_new_user):
    if is_new_user == "True":
        text_hello = "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Å—è! üëã –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    else:
        text_hello = "–ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–º –¥–∞–Ω–Ω—ã–µ. ‚úè –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    courses = api.get_courses()
    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_course)
    for i in range(len(courses)):
        emoji_for_button = f"{emojies_for_course[i]} {courses[i]} –∫—É—Ä—Å"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"course_{courses[i]}"
                                                            f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_hello,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
def get_program(message, data):
    number_course, is_new_user = data.split('^')
    number_course = int(number_course)
    text_get_course = f"–¢—ã –≤—ã–±—Ä–∞–ª {number_course} –∫—É—Ä—Å! üéâ –ù–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è?"

    programs = api.get_programs(number_course)

    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_programs)
    for i in range(len(programs)):
        if programs[i] in type_of_program_dict.keys():
            emoji_for_button = (f"{emojies_for_programs[i]} "
                                f"{type_of_program_dict[programs[i]]}")
        else:
            emoji_for_button = (f"{emojies_for_programs[i]}"
                                f"{programs[i]}")
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"program_{programs[i]}"
                                                            f"^{number_course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_start{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_course,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
def get_group(message, data):
    number_program, number_course, is_new_user = data.split('^')
    if number_program in type_of_program_dict.keys():
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª: \n{type_of_program_dict[number_program]} üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"
    else:
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª {number_program} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"

    groups = api.get_groups(number_course,
                            number_program)

    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_groups)
    for i in range(len(groups)):
        emoji_for_button = f"{emojies_for_groups[i]} {groups[i]}"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"group_{groups[i]}"
                                                            f"^{number_program}"
                                                            f"^{number_course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_program{number_course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_group,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
def get_subgroup(message, data):
    number_group, number_program, number_course, is_new_user = data.split('^')

    text_get_subgroup = f"{number_group} ‚Äî —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞. –û—Å—Ç–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π!"

    subgroups = api.get_subgroups(number_course,
                                  number_program,
                                  number_group)
    markup = types.InlineKeyboardMarkup()
    for i in range(len(subgroups)):
        emoji_for_button = f"{emojies_for_subgroups[rand_emj(len(emojies_for_subgroups))]} {subgroups[i]}"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"subgroup_{subgroups[i]}"
                                                            f"^{number_group}"
                                                            f"^{number_program}"
                                                            f"^{number_course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("üö´ –ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã",
                                          callback_data=f"subgroup_None"
                                                        f"^{number_group}"
                                                        f"^{number_program}"
                                                        f"^{number_course}"
                                                        f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_group{number_program}"
                                                        f"^{number_course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_subgroup,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
def get_confirmation(message, data):
    number_subgroup, number_group, number_program, number_course, is_new_user = data.split('^')

    '''–ó–∞–≤–æ–¥–∏–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'''
    if number_program in type_of_program_dict.keys():
        number_program_for_message = type_of_program_dict[number_program]
    else:
        number_program_for_message = number_program

    '''–î–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π –∏ –±–µ–∑ –Ω–µ–µ'''
    if number_subgroup == "None":
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{number_course}-–π –∫—É—Ä—Å,\n"
                             f"{number_program_for_message},\n"
                             f"{number_group} ‚Äî –≥—Ä—É–ø–ø–∞,"
                             f"\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")
    else:
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{number_course}-–π –∫—É—Ä—Å,\n"
                             f"{number_program_for_message},\n"
                             f"{number_group} ‚Äî –≥—Ä—É–ø–ø–∞,\n"
                             f"{number_subgroup} ‚Äî –ø–æ–¥–≥—Ä—É–ø–ø–∞.\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ! üéâüéä",
                                          callback_data=f"start_working{number_course}"
                                                        f"^{number_program}"
                                                        f"^{number_group}"
                                                        f"^{number_subgroup}"
                                                        f"^{message.chat.id}"
                                                        f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚úè",
                                          callback_data=f"back_to_start"
                                                        f"{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_subgroup{number_group}"
                                                        f"^{number_program}"
                                                        f"^{number_course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_confirmation,
                     reply_markup=markup)


# –í—ã–≤–æ–¥ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_menu(message):
    text_schedule = ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
                     "üîπ /settings ‚Äî <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ</i>\n\n"
                     "üîπ /menu ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>\n\n"
                     "üîπ /help ‚Äî <i>–í—ã–≤–æ–¥ –ø–æ–º–æ—â–∏</i>\n\n"
                     "üîπ /schedule ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i>\n\n"
                     "‚ùó –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–ø–∞–¥—É—Ç. "
                     "–ß—Ç–æ–±—ã –∏—Ö –≤–µ—Ä–Ω—É—Ç—å, –≤–≤–µ–¥–∏ /menu –µ—â–µ —Ä–∞–∑! üôÇ")

    keyboard_markup_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup_down = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # add_schedule_calendar_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    get_schedule_text_button = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    # get_deadlines_button = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
    # keyboard_markup_up.row(add_schedule_calendar_button)
    keyboard_markup_up.row(get_schedule_text_button)
    keyboard_markup_up.row_width = 4

    bot.send_message(message.chat.id,
                     text_schedule,
                     reply_markup=keyboard_markup_up, parse_mode='HTML')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def get_schedule(message):
    bot.delete_message(message.chat.id, message.message_id)
    text_get_schedule = "üîµ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:"

    markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
    #                                       url="webcal://https://hse-schedule-bot.xenforo-studio.ru/api/files/user_files/db625264-0a6c-4b25-b074-4f2f290e76fe/schedule.ics"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                                          callback_data="add_calendar"))
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–º .ics",
                                          callback_data="get_file"))
    # markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º",
    #                                       callback_data="get_text_schedule"))

    bot.send_message(message.chat.id,
                     text_get_schedule,
                     reply_markup=markup)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_text_schedule(message):
    bot.delete_message(message.chat.id, message.message_id)
    schedule_json = api.get_schedule(message.chat.id)

    if schedule_json['error'] is True:
        bot.send_message(message.chat.id, '–î–ª—è —Ç–µ–±—è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ü§∑\n–ù–∞—Å—Ç—Ä–æ–π –≥—Ä—É–ø–ø—É –∑–∞–Ω–æ–≤–æ '
                                          '–∫–æ–º–∞–Ω–¥–æ–π /settings!')
    else:
        schedule_dict = schedule_json['response']
        if len(schedule_dict) == 1:
            schedule_sending(message, schedule_dict[0]['weekNumber'], schedule_dict)
        else:
            text_message = "üîµ –í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
            markup = types.InlineKeyboardMarkup()

            dates_of_session = []
            sessionExist = False

            for week in schedule_dict:
                if str(week['weekNumber']) != 'None':
                    markup.add(types.InlineKeyboardButton(f"–ù–µ–¥–µ–ª—è {week['weekNumber']}, "
                                                          f"{week['weekStart']} ‚Äî {week['weekEnd']}",
                                                          callback_data=f"number_of_week_schedule{week['weekNumber']}"))
                else:
                    sessionExist = True
                    dates_of_session.append(week['weekStart'])
                    dates_of_session.append(week['weekEnd'])
            if sessionExist:
                list_length = len(dates_of_session)
                markup.add(types.InlineKeyboardButton(f"–°–µ—Å—Å–∏—è, "
                                                      f"{dates_of_session[0]} ‚Äî {dates_of_session[list_length - 1]}",
                                                      callback_data=f"number_of_week_scheduleNone"))

            bot.send_message(message.chat.id,
                             text_message,
                             reply_markup=markup)


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_sending(message, data, schedule_dict):
    is_session = False
    if data != 'None':
        data = int(data)
    else:
        data = None
        is_session = True

    if data != None:
        number_of_week = data % 3
        emojies_for_header = emojies_for_week_color[number_of_week]
        text_for_message = f"<b>{emojies_for_header} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {data} –Ω–µ–¥–µ–ª—é {emojies_for_header}</b>\n\n"
    else:
        emojies_for_header = 'üçÄ'
        text_for_message = f"<b>{emojies_for_header} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é {emojies_for_header}</b>\n\n"

    bot.send_message(message.chat.id, text_for_message, parse_mode='HTML')

    def get_schedule_for_send(lesson):
        text_for_message = ''
        '''–ï—Å–ª–∏ –≤–∏–¥ –ø–∞—Ä—ã ‚Äî –º–∞–π–Ω–æ—Ä'''
        if lesson['lessonType'] == 'COMMON_MINOR':
            # text_for_message = (f"<u><b>{day_of_the_week}, {date_string}</b></u>\n")
            # text_for_message += f"\n{type_of_lessons_dict[lesson['lessonType']]}"

            # text_for_message = (f"<u><b>{day_of_the_week}, {date_string}</b></u> - "
            #                     f"{type_of_lessons_dict[lesson['lessonType']]}\n")

            text_for_message = f"{type_of_lessons_dict[lesson['lessonType']]}\n"

        else:
            '''–í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã'''
            time_of_pair = f"{lesson['startTime']} ‚Äî {lesson['endTime']}"

            if lesson['startTime'] != None and lesson['endTime'] != None:
                '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã'''
                text_for_message += f"<b>{number_of_pair_dict[lesson['startTime']]}</b> ‚Äî "

                '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∏ –µ–µ —Ç–∏–ø'''
                if lesson['lessonType'] in type_of_lessons_dict.keys():
                    text_for_message += (f"{lesson['subject']} ‚Äî "
                                         f"{type_of_lessons_dict[lesson['lessonType']]}\n")

                '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã'''
                text_for_message += (f"<b>{time_of_pair}</b> ")

            '''–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∏—Å—Ç–∞–Ω—Ç –∏–ª–∏ –æ—á–Ω–∞—è'''
            if lesson['isOnline']:

                '''- –ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏'''
                if lesson['links'] == None:
                    text_for_message += (f"–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç \n")

                else:
                    text_for_message += (f"–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏:\n")
                    for link in lesson['links']:
                        text_for_message += (f"{link}\n")

            else:
                if lesson['places'] != None:
                    if len(lesson['places']) == 1:
                        place = lesson['places'][0]
                        text_for_message += (
                            f"–ö–æ—Ä–ø—É—Å {place['building']}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {place['office']} \n")
                    else:
                        text_for_message += f'–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç:\n'
                        for place in lesson['places']:
                            '''- –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é'''
                            text_for_message += (
                                f"–ö–æ—Ä–ø—É—Å {place['building']}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {place['office']} \n")

            if lesson['lecturer'] != None:
                '''–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–∞—Ä—ã'''
                text_for_message += (f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ‚Äî <i>{lesson['lecturer']}</i> \n")

            '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –ø–∞—Ä–µ'''
            if lesson['additionalInfo'] != None:
                for addInfo in lesson['additionalInfo']:
                    text_for_message += (f"\n<i>–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ‚Äî {addInfo}</i> \n")

            text_for_message += "\n"
        return text_for_message

    for week in schedule_dict:
        if week['weekNumber'] == data:

            lessons = week['lessons']

            if lessons:
                for day in lessons:
                    keys = day.keys()
                    for key in keys:
                        '''–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ '''
                        date_string = key
                        day_, month, year = date_string.split('.')
                        day_ = int(day_)
                        month = int(month)
                        year = int(year)
                        date = datetime.datetime(year, month, day_)
                        day_of_the_week = days_of_week_list[date.isoweekday() - 1]
                        '''–ö–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏'''

                        daily_schedule_list = day[key]
                        #count_pairs = str(len(daily_schedule_list))

                        first_pair = number_of_pair_dict[daily_schedule_list[0]['startTime']]
                        last_pair = number_of_pair_dict[daily_schedule_list[len(daily_schedule_list) - 1]['startTime']]
                        lessons_list_count = int(last_pair.replace('-–∞—è –ø–∞—Ä–∞', ''))

                        lesson_list = [{}] * (lessons_list_count)

                        ''' –¢—É—Ç —è –¥–µ–ª–∞—é –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞—Ä–∞–º –∑–∞ –¥–µ–Ω—å, –≤ –Ω–µ–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é –≤ –º–∞—Å—Å–∏–≤–µ –ø–∞—Ä—ã
                        –ü–æ—Ç–æ–º –∏–¥—É –ø–æ —ç—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É –∏ –ø—Ä–æ–≤–µ—Ä—è—é, 0 —Ç–∞–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å. –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å - —Ä–∞—Å–∫—Ä—ã–≤–∞—é –µ–≥–æ
                        –ò–Ω–∞—á–µ –≤—ã–≤–æ–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∫–Ω–æ" '''

                        for lesson in daily_schedule_list:
                            pair_index_string = number_of_pair_dict[lesson["startTime"]]
                            pair_index = int(pair_index_string.replace('-–∞—è –ø–∞—Ä–∞', '')) - 1

                            lesson_list[pair_index] = lesson

                        count_pairs = 0
                        for pair in lesson_list:
                            if pair:
                                count_pairs += 1

                        count_pairs = str(count_pairs)

                        text_for_message = ""

                        if is_session:
                            text_for_message += f"<b>{day_of_the_week}, {date_string}</b>\n\n"
                        else:
                            text_for_message += (f"<b>{day_of_the_week}, {date_string} ‚Äî "
                                                 f"{count_pairs_dict[count_pairs]}</b>\n\n")

                        '''–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –≤ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å'''

                        is_pairs_start = False
                        number_of_pair = 0
                        for lesson in lesson_list:
                            if not is_pairs_start:
                                if lesson:
                                    is_pairs_start = True
                                    text_for_message += get_schedule_for_send(lesson)
                            else:
                                if lesson:
                                    text_for_message += get_schedule_for_send(lesson)
                                else:
                                    text_for_message += f"<b>{number_of_pair + 1}-–∞—è –ø–∞—Ä–∞</b>"
                                    text_for_message += f" - –û–ö–ù–û ü™ü\n\n"
                            number_of_pair += 1
                        bot.send_message(message.chat.id, text_for_message, parse_mode='HTML')

            else:
                if data == None:
                    text_for_message = f"<b>–í —ç—Ç—É –Ω–µ–¥–µ–ª—é —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä! üéâüéä</b> \n"
                    bot.send_message(message.chat.id, text_for_message, parse_mode='HTML')



# ---------------------------------  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥  ----------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /registration
@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç', '–ø–æ–µ—Ö–∞–ª–∏', 'registration', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
@bot.message_handler(func=lambda message: message.text == ('start' or '—Å—Ç–∞—Ä—Ç' or '–ø–æ–µ—Ö–∞–ª–∏'
                                                           or 'registration' or '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
def get_registration(message):
    bot.delete_message(message.chat.id, message.message_id)
    if api.check_registration_user(message.chat.id):
        get_menu(message)
    else:
        get_course(message, True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏'])
@bot.message_handler(func=lambda message: message.text == ('help' or '–ø–æ–º–æ—â—å' or '–ø–æ–º–æ–≥–∏'))
def get_help(message):
    bot.delete_message(message.chat.id, message.message_id)
    text_help = ("<b>–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:</b>\n\n"
                 "üîπ /start ‚Äî <i>–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥—Ä—É–ø–ø—ã –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã</i>\n\n"
                 "üîπ /settings ‚Äî <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ</i>\n\n"
                 "üîπ /menu ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>\n\n"
                 "üîπ /schedule ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i>\n\n"
                 "–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî <b>@hse_perm_helper_feedback</b>\n"
                 "–ë—É–¥–µ–º —Ä–∞–¥—ã —Ç–≤–æ–µ–º—É –æ—Ç–∑—ã–≤—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é!\n\n"
                 f"–í–µ—Ä—Å–∏—è <i>{version}</i>")
    bot.send_message(message.chat.id, text_help, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.message_handler(commands=['menu', '–º–µ–Ω—é'])
@bot.message_handler(func=lambda message: message.text == ('menu' or '–º–µ–Ω—é'))
def start_working(message):
    bot.delete_message(message.chat.id, message.message_id)
    get_menu(message)


# –õ–µ—Ö–∞, —É–¥–∞–ª–∏ —ç—Ç–æ –ø–æ—Ç–æ–º, —ç—Ç–æ –Ω–∞—à —Å—Ç–∞–∂—ë—Ä —Ç–∞–∫ —à—É—Ç–∏—Ç
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gay
# @bot.message_handler(commands=['gay', '–≥–µ–π'])
# @bot.message_handler(func=lambda message: message.text == ('gay' or '–≥–µ–π'))
# def who_is_gay(message):
#     bot.delete_message(message.chat.id, message.message_id)
#     if random.randint(0, 9) < 5:
#         bot.send_message(message.chat.id, "–î–µ–Ω–∏—Å –ú–∞–ª–∏–Ω–∏–Ω –≥–µ–π üë¨")
#     else:
#         bot.send_message(message.chat.id, "–î–∞–Ω–∏–ª –ö—É–Ω–∞–∫–±–∞–µ–≤ –≥–µ–π üë¨")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
@bot.message_handler(commands=['settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'])
@bot.message_handler(func=lambda message: message.text == ('settings' or '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
def get_settings(message):
    bot.delete_message(message.chat.id, message.message_id)
    get_course(message, False)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@bot.message_handler(commands=['schedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
@bot.message_handler(func=lambda message: message.text == ('schedule' or '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
def get_settings(message):
    get_text_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# @bot.message_handler(func= lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
# def callback_message(message):
#     get_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def callback_message(message):
    get_text_schedule(message)


# @bot.message_handler(func= lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
# def callback_message(message):
#     get_schedule(message)


# @bot.message_handler(func= lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
# def callback_message(message):
#     bot.send_message(message.chat.id, "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")


# ---------------------------------  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π  ----------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@bot.callback_query_handler(lambda c: c.data.startswith('course_'))
def course_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("course_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_program(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.callback_query_handler(lambda c: c.data.startswith('program_'))
def program_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("program_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_group(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(lambda c: c.data.startswith('group_'))
def group_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("group_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_subgroup(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(lambda c: c.data.startswith('subgroup_'))
def subgroup_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("subgroup_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_confirmation(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
@bot.callback_query_handler(lambda c: c.data.startswith('back_to_'))
def program_query_handler(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    if callback_query.data.startswith('back_to_program'):
        data = callback_query.data.replace('back_to_program', "")
        get_program(callback_query.message, data)
    elif callback_query.data.startswith('back_to_group'):
        data = callback_query.data.replace('back_to_group', "")
        get_group(callback_query.message, data)
    elif callback_query.data.startswith('back_to_subgroup'):
        data = callback_query.data.replace('back_to_subgroup', "")
        get_subgroup(callback_query.message, data)
    elif callback_query.data.startswith('back_to_start'):
        data = callback_query.data.replace('back_to_start', "")
        get_course(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@bot.callback_query_handler(lambda c: c.data.startswith("start_working"))
def callback_message(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    data = callback_query.data.replace('start_working', "")
    list_data = data.split("^")
    is_new_user = list_data[len(list_data) - 1]
    if is_new_user == "True":
        is_error = api.registration_user(data)
    else:
        is_error = api.edit_user(data)

    if not is_error:
        get_menu(callback_query.message)

    else:
        bot.send_message(callback_query.message.chat.id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. üòî "
                                                         "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÉ\n"
                                                         "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–±–µ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "
                                                         "/settings !")


# –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
@bot.callback_query_handler(func=lambda callback: callback.data == "add_calendar")
def callback_message(callback):
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    # schedule = open('calendar/schedule.ics', 'r', encoding='utf-8')
    # bot.send_message(callback.message.chat.id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:\n\n"
    #                                            "1. –°–∫–∞—á–∞–π —Ñ–∞–π–ª –Ω–∏–∂–µ;\n"
    #                                            "2. –ó–∞–ø—É—Å—Ç–∏ –µ–≥–æ;\n"
    #                                            "3. –ü—Ä–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ç–æ–±–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
    # bot.send_document(callback.message.chat.id, schedule)
    bot.send_message(callback.message.chat.id, '–ë—É–¥–µ—Ç –ø–æ–∑–∂–µ!')


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot.callback_query_handler(lambda c: c.data.startswith("number_of_week_schedule"))
def callback_message(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    data = callback_query.data.replace('number_of_week_schedule', "")
    schedule_json = api.get_schedule(callback_query.message.chat.id)
    schedule_dict = schedule_json['response']
    schedule_sending(callback_query.message, data, schedule_dict)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
bot.set_my_commands([
    types.BotCommand('help', '–ü–æ–º–æ—â—å —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞'),
    types.BotCommand('settings', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ'),
    types.BotCommand('menu', '–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é'),
    types.BotCommand('schedule', '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
], scope=types.BotCommandScopeDefault())

# –ú–æ–¥—É–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å), —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if __name__ == "__main__":
    scheduler.run_check_events_update()

# –ë–µ–∑–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
bot.infinity_polling(timeout=10, long_polling_timeout=5)