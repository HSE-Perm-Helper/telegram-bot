import random

from telebot import types

import api
from worker import workers
from bot import bot
from callback.callback import check_callback, extract_data_from_callback
from callback.schedule_callback import ScheduleCallback
from decorator.decorators import typing_action, exception_handler, required_admin
from message.schedule_messages import SCHEDULE_NOT_FOUND_ANYMORE, NO_LESSONS_IN_SCHEDULE
from message.common_messages import SUCCESS_REGISTER
from schedule.schedule import ScheduleType
from schedule.schedule_utils import get_button_by_schedule_info, group_lessons_by_key, get_schedule_header_by_schedule_info
from util.users_utils import send_message_to_users
from util.utils import is_admin, get_day_of_week_from_date, get_day_of_week_from_slug, answer_callback

# ---------------------------------  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞  ----------------------------------- #

bot.can_join_groups = False  # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã (–µ–º—É –ø–æ—Ñ–∏–≥)
version = "1.10.0-beta"

# ---------------------------------  –î–∞–Ω–Ω—ã–µ  ----------------------------------- #

type_of_lessons_dict = {
    'LECTURE': '–ª–µ–∫—Ü–∏—è üò¥',
    'SEMINAR': '—Å–µ–º–∏–Ω–∞—Ä üìó',
    'COMMON_MINOR': '–ú–∞–π–Ω–æ—Ä ‚ìÇ',
    'ENGLISH': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π üÜé',
    'EXAM': '—ç–∫–∑–∞–º–µ–Ω ‚ò†Ô∏è',
    'INDEPENDENT_EXAM': '–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫–∑–∞–º–µ–Ω ‚ò†Ô∏è‚ò†Ô∏è',
    'TEST': '–∑–∞—á—ë—Ç ‚ò†Ô∏è',
    'PRACTICE': '–ø—Ä–∞–∫—Ç–∏–∫–∞ üíº',
    'MINOR': '–ú–∞–π–Ω–æ—Ä ‚ìÇ',
    'COMMON_ENGLISH': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π üÜé',
    'STATEMENT': '–≤–µ–¥–æ–º–æ—Å—Ç—å üìú',
    'ICC': '–ú–ö–î üìô',
    'UNDEFINED_AED': '–î–û–¶ –ø–æ –≤—ã–±–æ—Ä—É üìï',
    'AED': '–î–û–¶ üìï',
    'CONSULT': '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üóø',
    'EVENT': '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
}

type_of_program_dict = {
    '–ú–ë': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ',
    '–†–ò–°': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    '–ò': '–ò—Å—Ç–æ—Ä–∏—è',
    '–ò–Ø': '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
    '–Æ': '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è',
    '–£–ë': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º',
    '–≠': '–≠–∫–æ–Ω–æ–º–∏–∫–∞',
    '–ü–ò': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è',
    '–ë–ò': '–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'
}

number_of_pair_dict = {
    '8:10': '1-–∞—è –ø–∞—Ä–∞',
    '9:40': '2-–∞—è –ø–∞—Ä–∞',
    '11:30': '3-–∞—è –ø–∞—Ä–∞',
    '13:10': '4-–∞—è –ø–∞—Ä–∞',
    '15:00': '5-–∞—è –ø–∞—Ä–∞',
    '16:40': '6-–∞—è –ø–∞—Ä–∞',
    '18:20': '7-–∞—è –ø–∞—Ä–∞',
    '20:10': '8-–∞—è –ø–∞—Ä–∞'
}

count_pairs_dict = {
    '1': '1 –ø–∞—Ä–∞ ü•≥',
    '2': '2 –ø–∞—Ä—ã üôÇ',
    '3': '3 –ø–∞—Ä—ã üòê',
    '4': '4 –ø–∞—Ä—ã üòü',
    '5': '5 –ø–∞—Ä üò®',
    '6': '6 –ø–∞—Ä üò±',
    '7': '7 –ø–∞—Ä üòµ',
    '8': '8 –ø–∞—Ä ‚ò†'
}

emojies_for_course = ['üìí', 'üìì', 'üìî', 'üìï', 'üìó', 'üìò', 'üìô']
emojies_for_programs = ['üå∂', 'üçë', 'üçâ', 'üçè', 'üçç', 'ü•≠', 'üçÜ', 'üçê', 'üçã', 'üçá', 'üçí', 'ü•ù', 'ü••']
emojies_for_groups = ['‚ö™', 'üî¥', 'üü°', 'üü¢', 'üü£', 'üü§', 'üîµ', '‚ö´']
emojies_for_subgroups = ['üåÅ', 'üåÉ', 'üåÑ', 'üåÖ', 'üåÜ', 'üåá', 'üåâ']


# emojies_for_number_of_pair = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']


# ---------------------------------  –§—É–Ω–∫—Ü–∏–∏  ----------------------------------- #


# –†–∞–Ω–¥–æ–º–Ω—ã–π –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
def rand_emj(count):
    return random.randint(0, count - 1)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
def get_course(message, is_new_user: bool):
    if is_new_user:
        text_hello = "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Å—è! üëã –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    else:
        text_hello = "–ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–º –¥–∞–Ω–Ω—ã–µ. ‚úè –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"
    courses = api.get_courses()
    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_course)
    for i in range(len(courses)):
        emoji_for_button = f"{emojies_for_course[i]} {courses[i]} –∫—É—Ä—Å"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"course_{courses[i]}"
                                                            f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_hello,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
def get_program(message, data):
    number_course, is_new_user = data.split('^')
    number_course = int(number_course)
    text_get_course = f"–¢—ã –≤—ã–±—Ä–∞–ª {number_course} –∫—É—Ä—Å! üéâ –ù–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è?"

    programs = api.get_programs(number_course)

    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_programs)
    for i in range(len(programs)):
        if programs[i] in type_of_program_dict.keys():
            emoji_for_button = (f"{emojies_for_programs[i]} "
                                f"{type_of_program_dict[programs[i]]}")
        else:
            emoji_for_button = (f"{emojies_for_programs[i]}"
                                f"{programs[i]}")
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"program_{programs[i]}"
                                                            f"^{number_course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_start{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_course,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
def get_group(message, data):
    program, course, is_new_user = data.split('^')
    if program in type_of_program_dict.keys():
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª: \n{type_of_program_dict[program]} üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"
    else:
        text_get_group = f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª {program} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! üòé\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É!"

    groups = api.get_groups(course,
                            program)

    markup = types.InlineKeyboardMarkup()
    random.shuffle(emojies_for_groups)
    for i in range(len(groups)):
        emoji_for_button = f"{emojies_for_groups[i]} {groups[i]}"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"group_{groups[i]}"
                                                            f"^{program}"
                                                            f"^{course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_program{course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_group,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
def get_subgroup(message, data):
    group, program, course, is_new_user = data.split('^')

    text_get_subgroup = f"{group} ‚Äî —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞. –û—Å—Ç–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π!"

    subgroups = api.get_subgroups(course,
                                  program,
                                  group)
    markup = types.InlineKeyboardMarkup()
    for i in range(len(subgroups)):
        emoji_for_button = f"{emojies_for_subgroups[rand_emj(len(emojies_for_subgroups))]} {subgroups[i]}"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"subgroup_{subgroups[i]}"
                                                            f"^{group}"
                                                            f"^{program}"
                                                            f"^{course}"
                                                            f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("üö´ –ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã",
                                          callback_data=f"subgroup_None"
                                                        f"^{group}"
                                                        f"^{program}"
                                                        f"^{course}"
                                                        f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_group{program}"
                                                        f"^{course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_get_subgroup,
                     reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
def get_confirmation(message, data):
    subgroup, group, program, course, is_new_user = data.split('^')

    '''–ó–∞–≤–æ–¥–∏–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'''
    if program in type_of_program_dict.keys():
        program_for_message = type_of_program_dict[program]
    else:
        program_for_message = program

    '''–î–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π –∏ –±–µ–∑ –Ω–µ–µ'''
    if subgroup == "None":
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{course}-–π –∫—É—Ä—Å,\n"
                             f"{program_for_message},\n"
                             f"{group} ‚Äî –≥—Ä—É–ø–ø–∞,"
                             f"\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")
    else:
        text_confirmation = ("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n" +
                             f"{course}-–π –∫—É—Ä—Å,\n"
                             f"{program_for_message},\n"
                             f"{group} ‚Äî –≥—Ä—É–ø–ø–∞,\n"
                             f"{subgroup} ‚Äî –ø–æ–¥–≥—Ä—É–ø–ø–∞.\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ! üéâüéä",
                                          callback_data=f"start_working{course}"
                                                        f"^{program}"
                                                        f"^{group}"
                                                        f"^{subgroup}"
                                                        f"^{message.chat.id}"
                                                        f"^{is_new_user}"))
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚úè",
                                          callback_data=f"back_to_start"
                                                        f"{is_new_user}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥",
                                          callback_data=f"back_to_subgroup{group}"
                                                        f"^{program}"
                                                        f"^{course}"
                                                        f"^{is_new_user}"))

    bot.send_message(message.chat.id,
                     text_confirmation,
                     reply_markup=markup)


# –í—ã–≤–æ–¥ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_menu(message):
    text_schedule = ("<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
                     "üîπ /settings ‚Äî <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ</i>\n\n"
                     "üîπ /menu ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>\n\n"
                     "üîπ /help ‚Äî <i>–í—ã–≤–æ–¥ –ø–æ–º–æ—â–∏</i>\n\n"
                     "üîπ /schedule ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i>\n\n"
                     "üîπ /base_schedule ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å</i>\n\n"
                     "‚ùó –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–ø–∞–¥—É—Ç. "
                     "–ß—Ç–æ–±—ã –∏—Ö –≤–µ—Ä–Ω—É—Ç—å, –≤–≤–µ–¥–∏ /menu –µ—â–µ —Ä–∞–∑! üôÇ")

    keyboard_markup_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup_down = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # add_schedule_calendar_button = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    get_schedule_text_button = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üíº")
    get_base_schedule_text_button = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å üóì")
    # get_deadlines_button = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
    # keyboard_markup_up.row(add_schedule_calendar_button)
    keyboard_markup_up.row(get_schedule_text_button)
    keyboard_markup_up.row(get_base_schedule_text_button)
    keyboard_markup_up.row_width = 4

    bot.send_message(message.chat.id,
                     text_schedule,
                     reply_markup=keyboard_markup_up, parse_mode='HTML')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def get_schedule(message):
    bot.delete_message(message.chat.id, message.message_id)
    text_get_schedule = "üîµ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:"

    markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
    #                                       url="webcal://https://hse-schedule-bot.xenforo-studio.ru/api/files/user_files/db625264-0a6c-4b25-b074-4f2f290e76fe/schedule.ics"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                                          callback_data="add_calendar"))
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–º .ics",
                                          callback_data="get_file"))
    # markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º",
    #                                       callback_data="get_text_schedule"))

    bot.send_message(message.chat.id,
                     text_get_schedule,
                     reply_markup=markup)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_text_schedule(message):
    bot.delete_message(message.chat.id, message.message_id)
    schedule_json = api.get_schedules()

    if schedule_json['error'] is True:
        bot.send_message(message.chat.id, '–î–ª—è —Ç–µ–±—è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ü§∑\n–ù–∞—Å—Ç—Ä–æ–π –≥—Ä—É–ø–ø—É –∑–∞–Ω–æ–≤–æ '
                                          '–∫–æ–º–∞–Ω–¥–æ–π /settings!')
    else:
        schedules_dict = list(filter(lambda schedule: schedule["scheduleType"] != ScheduleType.QUARTER_SCHEDULE.value,
                                     schedule_json['response']))

        if len(schedules_dict) == 1:
            schedule = schedules_dict[0]
            start = schedule["start"]
            end = schedule["end"]
            schedule_sending(message, api.get_schedule(message.chat.id, start, end)["response"])
        elif len(schedules_dict) == 0:
            bot.send_message(message.chat.id,
                             "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π! üòé")
        else:
            text_message = "üîµ –í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å:"
            markup = types.InlineKeyboardMarkup()

            for schedule in schedules_dict:
                markup.add(get_button_by_schedule_info(schedule, True)),

            bot.send_message(message.chat.id,
                             text_message,
                             reply_markup=markup)


def get_lesson_as_string(lesson):
    text_for_message = ''
    '''–ï—Å–ª–∏ –≤–∏–¥ –ø–∞—Ä—ã ‚Äî –º–∞–π–Ω–æ—Ä'''
    if lesson['lessonType'] == 'COMMON_MINOR':
        text_for_message = f"{type_of_lessons_dict[lesson['lessonType']]}\n"

    else:
        '''–í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã'''
        time_of_pair = f"{lesson['time']['startTime']} ‚Äî {lesson['time']['endTime']}"

        if lesson['time']['startTime'] is not None and lesson['time']['endTime'] != None:
            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã'''
            text_for_message += f"<b>{number_of_pair_dict[lesson['time']['startTime']]}</b> ‚Äî "

            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∏ –µ–µ —Ç–∏–ø'''
            if lesson['lessonType'] in type_of_lessons_dict.keys():
                text_for_message += (f"{lesson['subject']} ‚Äî "
                                     f"{type_of_lessons_dict[lesson['lessonType']]}\n")

            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã'''
            text_for_message += (f"<b>{time_of_pair}</b> ")

        '''–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∏—Å—Ç–∞–Ω—Ç –∏–ª–∏ –æ—á–Ω–∞—è'''
        if lesson['isOnline']:

            '''- –ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏'''
            if lesson['links'] is None:
                text_for_message += (f"–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç \n")

            else:
                text_for_message += (f"–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏:\n")
                for link in lesson['links']:
                    text_for_message += (f"{link}\n")

        else:
            if lesson['places'] is not None:
                if len(lesson['places']) == 1:
                    place = lesson['places'][0]
                    text_for_message += (
                        f"–ö–æ—Ä–ø—É—Å {place['building']}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {place['office']} \n")
                else:
                    text_for_message += f'–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç:\n'
                    for place in lesson['places']:
                        '''- –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é'''
                        text_for_message += (
                            f"–ö–æ—Ä–ø—É—Å {place['building']}, –∞—É–¥–∏—Ç–æ—Ä–∏—è {place['office']} \n")

        if lesson['lecturer'] is not None:
            '''–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–∞—Ä—ã'''
            text_for_message += (f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ‚Äî <i>{lesson['lecturer']}</i> \n")

        '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –ø–∞—Ä–µ'''
        if lesson['additionalInfo'] is not None:
            for addInfo in lesson['additionalInfo']:
                text_for_message += (f"\n<i>–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ‚Äî {addInfo}</i> \n")

        text_for_message += "\n"
    return text_for_message


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_sending(message, schedule_dict):
    schedule_type = schedule_dict["scheduleType"]
    is_session = False
    if schedule_type == ScheduleType.SESSION_SCHEDULE.value:
        is_session = True

    temp_lessons = schedule_dict['lessons']

    if len(temp_lessons) == 0:
        bot.send_message(message.chat.id, NO_LESSONS_IN_SCHEDULE, parse_mode='HTML')
        return

    else:
        text_for_message = f"<b>{get_schedule_header_by_schedule_info(schedule_dict)}</b>\n\n"

        bot.send_message(message.chat.id, text_for_message, parse_mode='HTML')
        if schedule_type == ScheduleType.QUARTER_SCHEDULE.value:
            temp_lessons = group_lessons_by_key(temp_lessons,
                                                lambda l: get_day_of_week_from_slug(l["time"]["dayOfWeek"]))
        else:
            temp_lessons = group_lessons_by_key(temp_lessons,
                                                lambda l: f'{get_day_of_week_from_date(l["time"]["date"])}'
                                                          f', {l["time"]["date"]}')
        for day, lessons in temp_lessons.items():
            last_pair = number_of_pair_dict[lessons[- 1]["time"]['startTime']]
            lessons_list_count = int(last_pair.replace('-–∞—è –ø–∞—Ä–∞', ''))

            lesson_list: list[None | list[dict]] = [None] * lessons_list_count

            ''' –¢—É—Ç —è –¥–µ–ª–∞—é –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞—Ä–∞–º –∑–∞ –¥–µ–Ω—å, –≤ –Ω–µ–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é –≤ –º–∞—Å—Å–∏–≤–µ –ø–∞—Ä—ã
                –ü–æ—Ç–æ–º –∏–¥—É –ø–æ —ç—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É –∏ –ø—Ä–æ–≤–µ—Ä—è—é, 0 —Ç–∞–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å. –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å - —Ä–∞—Å–∫—Ä—ã–≤–∞—é –µ–≥–æ
                –ò–Ω–∞—á–µ –≤—ã–≤–æ–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∫–Ω–æ" '''

            for lesson in lessons:
                pair_index_string = number_of_pair_dict[lesson["time"]["startTime"]]
                pair_index = int(pair_index_string.replace('-–∞—è –ø–∞—Ä–∞', '')) - 1

                if lesson_list[pair_index] is None:
                    lesson_list[pair_index] = []

                lesson_list[pair_index].append(lesson)

            count_pairs = 0
            for pair in lesson_list:
                if pair:
                    count_pairs += 1

            count_pairs = str(count_pairs)

            text_for_message = ""

            if is_session:
                text_for_message += f"<b>{day}</b>\n\n"
            else:
                text_for_message += (f"<b>{day} ‚Äî "
                                     f"{count_pairs_dict[count_pairs]}</b>\n\n")

            '''–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –≤ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å'''

            is_pairs_start = False
            number_of_pair = 0
            for lessons_inner in lesson_list:
                if not is_pairs_start:
                    if lessons_inner:
                        is_pairs_start = True
                if not lessons_inner:
                    if is_pairs_start:
                        text_for_message += f"<b>{number_of_pair + 1}-–∞—è –ø–∞—Ä–∞</b>"
                        text_for_message += f" - –û–ö–ù–û ü™ü\n\n"

                else:
                    for lesson in lessons_inner:
                        text_for_message += get_lesson_as_string(lesson)
                number_of_pair += 1
            bot.send_message(message.chat.id, text_for_message, parse_mode='HTML')


# ---------------------------------  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥  ----------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /registration
@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç', '–ø–æ–µ—Ö–∞–ª–∏', 'registration', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'])
@bot.message_handler(func=lambda message: message.text == ('start' or '—Å—Ç–∞—Ä—Ç' or '–ø–æ–µ—Ö–∞–ª–∏'
                                                           or 'registration' or '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
@typing_action
@exception_handler
def get_registration(message):
    if api.check_registration_user(message.chat.id):
        get_menu(message)
    else:
        get_course(message, True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏'])
@bot.message_handler(func=lambda message: message.text == ('help' or '–ø–æ–º–æ—â—å' or '–ø–æ–º–æ–≥–∏'))
@typing_action
@exception_handler
def get_help(message):
    bot.delete_message(message.chat.id, message.message_id)
    text_help = ("<b>–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:</b>\n\n"
                 "üîπ /start ‚Äî <i>–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥—Ä—É–ø–ø—ã –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã</i>\n\n"
                 "üîπ /settings ‚Äî <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ</i>\n\n"
                 "üîπ /menu ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã</i>\n\n"
                 "üîπ /schedule ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i>\n\n"
                 "–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî <b>@hse_perm_helper_feedback</b>\n"
                 "–ë—É–¥–µ–º —Ä–∞–¥—ã —Ç–≤–æ–µ–º—É –æ—Ç–∑—ã–≤—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é!\n\n"
                 f"–í–µ—Ä—Å–∏—è <i>{version}</i>")
    bot.send_message(message.chat.id, text_help, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.message_handler(commands=['menu', '–º–µ–Ω—é'])
@bot.message_handler(func=lambda message: message.text == ('menu' or '–º–µ–Ω—é'))
@typing_action
@exception_handler
def start_working(message):
    bot.delete_message(message.chat.id, message.message_id)
    get_menu(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
@bot.message_handler(commands=['settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'])
@bot.message_handler(func=lambda message: message.text == ('settings' or '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
@typing_action
@exception_handler
def get_settings(message):
    bot.delete_message(message.chat.id, message.message_id)
    get_course(message, False)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@bot.message_handler(commands=['schedule', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
@bot.message_handler(func=lambda message: message.text == ('schedule' or '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
@typing_action
@exception_handler
def get_settings(message):
    get_text_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# @bot.message_handler(func= lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
# def callback_message(message):
#     get_schedule(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda
        message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üíº" or message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@typing_action
@exception_handler
def callback_message(message):
    get_text_schedule(message)


@bot.message_handler(commands=['remote_schedule'])
@typing_action
@exception_handler
def get_remote_schedule(message):
    if not is_admin(message.chat.id):
        return
    bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    link = api.get_remote_schedule_link(message.chat.id)
    markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", url=link))
    bot.send_message(message.chat.id,
                     text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–±–µ –≤—Å–µ–≥–æ-–ª–∏—à—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å."
                          "–ò –≤—Å—ë. –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É —Ç–µ–±—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mailing
@bot.message_handler(commands=["mailing"])
@exception_handler
@required_admin
def mailing_to_all(message: types.Message):
    courses = api.get_courses()
    markup = types.InlineKeyboardMarkup()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:"
    for i in range(len(courses)):
        emoji_for_button = f"{emojies_for_course[i]} {courses[i]} –∫—É—Ä—Å"
        markup.add(types.InlineKeyboardButton(emoji_for_button,
                                              callback_data=f"mailing_course_{courses[i]}"))
    markup.add(types.InlineKeyboardButton("–í—Å–µ–º",
                                          callback_data=f"mailing_course_all"))

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markup)


@bot.message_handler(commands=["base_schedule"])
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å üóì")
@typing_action
@exception_handler
def get_base_schedule(message: types.Message):
    bot.delete_message(message.chat.id, message.message_id)
    schedules_json = api.get_schedules()
    schedules = list(filter(lambda schedule: schedule["scheduleType"] == ScheduleType.QUARTER_SCHEDULE.value,
                            schedules_json['response']))
    if len(schedules) == 0:
        bot.send_message(message.chat.id,
                         "–ü–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –º–æ–¥—É–ª—å –Ω–µ—Ç! üéâüéä")
    else:
        schedule = schedules[0]
        response_schedule = api.get_schedule(message.chat.id, schedule["start"], schedule["end"])
        schedule_sending(message, response_schedule["response"])


def send_mail(message: types.Message, course: int = None):
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    if not course:
        users = api.get_user_ids()
    else:
        users = api.get_user_ids_by_course(course)
    send_message_to_users(message.html_text, users)


# ---------------------------------  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π  ----------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith('course_'))
@exception_handler
def course_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("course_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    get_program(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith('program_'))
@exception_handler
def program_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("program_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_group(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith('group_'))
@exception_handler
def group_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("group_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_subgroup(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith('subgroup_'))
@exception_handler
def subgroup_query_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.replace("subgroup_", "")
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    get_confirmation(callback_query.message, data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith('back_to_'))
@exception_handler
def program_query_handler(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    if callback_query.data.startswith('back_to_program'):
        data = callback_query.data.replace('back_to_program', "")
        get_program(callback_query.message, data)
    elif callback_query.data.startswith('back_to_group'):
        data = callback_query.data.replace('back_to_group', "")
        get_group(callback_query.message, data)
    elif callback_query.data.startswith('back_to_subgroup'):
        data = callback_query.data.replace('back_to_subgroup', "")
        get_subgroup(callback_query.message, data)
    elif callback_query.data.startswith('back_to_start'):
        data = callback_query.data.replace('back_to_start', "")
        get_course(callback_query.message, data == "True")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith("start_working"))
@exception_handler
def callback_message(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    data = callback_query.data.replace('start_working', "")
    course, program, group, subgroup, telegram_id, is_new_user = data.split("^")

    if subgroup != "None":
        subgroup = int(subgroup)
    else:
        subgroup = 0

    if is_new_user == "True":
        is_success = api.registration_user(telegram_id=telegram_id,
                                           group=group,
                                           subgroup=subgroup)
    else:
        is_success = api.edit_user(telegram_id=telegram_id,
                                   group=group,
                                   subgroup=subgroup)

    if is_success:
        answer_callback(bot, callback_query, text=SUCCESS_REGISTER)
        get_menu(callback_query.message)

    else:
        bot.send_message(callback_query.message.chat.id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. üòî "
                                                         "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÉ\n"
                                                         "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–±–µ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "
                                                         "/settings !")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@typing_action
@bot.callback_query_handler(lambda c: check_callback(c, ScheduleCallback.TEXT_SCHEDULE_CHOICE.value))
@exception_handler
def callback_message(callback_query: types.CallbackQuery):
    data = extract_data_from_callback(ScheduleCallback.TEXT_SCHEDULE_CHOICE.value, callback_query.data)
    start = data[0]
    end = data[1]
    need_delete_message = data[2]
    if need_delete_message == "True":
        bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    schedule_json = api.get_schedule(callback_query.message.chat.id, start, end)
    if need_delete_message == "False" and schedule_json["error"]:
        answer_callback(bot, callback_query, text=SCHEDULE_NOT_FOUND_ANYMORE, show_alert=True)

        keyboard = callback_query.message.reply_markup.keyboard
        new_keyboard = []
        for row in keyboard:
            filtered_row = list(filter(lambda button: button.callback_data != callback_query.data, row))
            if len(filtered_row) > 0:
                new_keyboard.append(filtered_row)

        bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                      message_id=callback_query.message.message_id,
                                      reply_markup=types.InlineKeyboardMarkup(keyboard=new_keyboard))
        return
    schedule_dict = schedule_json['response']
    schedule_sending(callback_query.message, schedule_dict)


@typing_action
@bot.callback_query_handler(lambda c: c.data.startswith("mailing_course"))
@exception_handler
def callback_message(callback_query: types.CallbackQuery):
    bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    data = callback_query.data.replace('mailing_course_', "")
    course = None
    if data != "all":
        course = int(data)
    bot.send_message(callback_query.message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ")
    bot.register_next_step_handler(callback_query.message, send_mail, course=course)


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
bot.set_my_commands([
    types.BotCommand('help', '–ü–æ–º–æ—â—å —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞'),
    types.BotCommand('settings', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ'),
    types.BotCommand('menu', '–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é'),
    types.BotCommand('schedule', '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
    types.BotCommand('base_schedule', '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å'),
], scope=types.BotCommandScopeDefault())

# –ú–æ–¥—É–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª—å), —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if __name__ == "__main__":
    workers.run_workers()

# –ë–µ–∑–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
bot.infinity_polling(timeout=10, long_polling_timeout=5)
