from aiogram import types

from callback.callback import insert_data_to_callback
from callback.schedule_callback import ScheduleCallback
from constants import constant
from schedule.schedule_type import ScheduleType

emojies_for_week_color = ['üü•', 'üü™', 'üü¶', 'üü©', 'üüß', 'üü®']


def get_button_text_by_schedule_info(schedule_info: dict, start: str, end: str) -> str:
    schedule_type = schedule_info["scheduleType"]
    match schedule_type:
        case ScheduleType.COMMON_SCHEDULE.value:
            number = schedule_info["number"]
            return f"–ù–µ–¥–µ–ª—è {number}, {start} ‚Äî {end}"
        case ScheduleType.SESSION_SCHEDULE.value:
            return f"–°–µ—Å—Å–∏—è, {start} ‚Äî {end}"
        case ScheduleType.QUARTER_SCHEDULE.value:
            number = schedule_info["number"]
            return f"–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {number} –º–æ–¥—É–ª—å"
    return "N/a"


def get_schedule_header_by_schedule_info(schedule_info: dict) -> str:
    schedule_type = schedule_info["scheduleType"]
    match schedule_type:
        case ScheduleType.COMMON_SCHEDULE.value:
            number = schedule_info["number"]
            emoji_index = number % len(emojies_for_week_color)
            emoji = emojies_for_week_color[emoji_index]
            return f"{emoji} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {number} –Ω–µ–¥–µ–ª—é {emoji}"
        case ScheduleType.SESSION_SCHEDULE.value:
            return f"üçÄ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é üçÄ"
        case ScheduleType.QUARTER_SCHEDULE.value:
            number = schedule_info["number"]
            return f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {number} –º–æ–¥—É–ª—å üóì"
    return "N/a"


def get_button_by_schedule_info(schedule_info: dict, need_delete_message: bool) -> types.InlineKeyboardButton:
    data, end, start = get_callback_for_schedule(need_delete_message, schedule_info)
    return types.InlineKeyboardButton(text=get_button_text_by_schedule_info(schedule_info, start, end),
                                      callback_data=data)


def get_callback_for_schedule(need_delete_message, schedule_info):
    start = schedule_info["start"]
    end = schedule_info["end"]
    data = insert_data_to_callback(ScheduleCallback.TEXT_SCHEDULE_CHOICE.value, [start, end, need_delete_message])
    return data, end, start


def group_lessons_by_key(lessons: list[dict], key_func) -> dict[str, list[dict]]:
    lessons_by_key = {}
    for lesson in lessons:
        key = key_func(lesson)
        if key not in lessons_by_key:
            lessons_by_key[key] = []
        lessons_by_key[key].append(lesson)
    return lessons_by_key


def get_lesson_as_string(lesson):
    text_for_message = ''

    '''–û–¢–ù–û–°–ò–¢–°–Ø –ö –ö–û–°–¢–´–õ–Æ –° –ü–û–î–ì–†–£–ü–ü–ê–ú–ò'''
    subgroup = ""

    '''–ï—Å–ª–∏ –≤–∏–¥ –ø–∞—Ä—ã ‚Äî –º–∞–π–Ω–æ—Ä'''
    if lesson['lessonType'] == 'COMMON_MINOR':
        text_for_message = f"{constant.type_of_lessons_dict[lesson['lessonType']]}\n"

    else:
        '''–í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã'''
        time_of_pair = f"{lesson['time']['startTime']} ‚Äî {lesson['time']['endTime']}"

        if lesson['time']['startTime'] is not None and lesson['time']['endTime'] != None:
            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã'''
            text_for_message += f"<b>{constant.number_of_pair_dict[lesson['time']['startTime']]} </b>"

            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã –∏ –µ–µ —Ç–∏–ø'''
            text_for_message += (f"{time_of_pair} "
                                 f"{constant.type_of_lessons_dict[lesson['lessonType']]}\n")

            '''–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã'''

            # if lesson['lessonType'] in constant.type_of_lessons_dict.keys():
            #     text_for_message += (f"{lesson['subject']}\n")

            '''–¢–£–¢ –ü–û–ö–ê –ß–¢–û –ö–û–°–¢–´–õ–¨, –í –°–õ–£–ß–ê–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –ü–ê–† –ù–ê –ë–≠–ö–ï –°–ù–ï–°–¢–ò –≠–¢–û–¢ –ö–£–°–û–ö –ò
            –ò –†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í–ï–†–•–ù–ò–ô, –ù–û –°–ù–ò–ó–£ –ù–ê–î–û –ë–£–î–ï–¢ –ï–©–ï –î–û–ü–ò–°–ê–¢–¨ –ö–û–î'''

            if lesson['lessonType'] in constant.type_of_lessons_dict.keys():
                if "–ø–æ–¥–≥—Ä—É–ø–ø–∞" in lesson['subject']:
                    pair_name_with_subgroup: str = lesson['subject']
                    pair_name = pair_name_with_subgroup[:len(pair_name_with_subgroup) - 21]
                    ' <b>(8 –ø–æ–¥–≥—Ä—É–ø–ø–∞)</b>'
                    subgroup = pair_name_with_subgroup[len(pair_name) + 5]
                    text_for_message += pair_name + "\n"
                else:
                    if lesson['lessonType'] in constant.type_of_lessons_dict.keys():
                        text_for_message += (f"{lesson['subject']}\n")

            '''–ö–û–ù–ï–¶ –ö–û–°–¢–´–õ–Ø'''

        if lesson['lecturer'] is not None:
            '''–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–∞—Ä—ã'''
            text_for_message += (f"<i>{lesson['lecturer']} </i>")

        '''–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∏—Å—Ç–∞–Ω—Ç –∏–ª–∏ –æ—á–Ω–∞—è'''
        if lesson['isOnline']:

            '''- –ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏'''

            '''–¢–û–¢ –°–ê–ú–´–ô –ö–û–°–¢–´–õ–¨ –í–ù–ò–ó–£'''
            if subgroup != "":
                text_for_message += f", {subgroup} –ø.–≥."
            else:
                text_for_message += "\n"
            '''–ö–û–ù–ï–¶ –ö–û–°–¢–´–õ–Ø'''

            if lesson['links'] is None:
                text_for_message += (f"\n–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n")

            else:
                text_for_message += (f"\n–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–∞—Ä–∞, —Å—Å—ã–ª–∫–∏:\n")
                for link in lesson['links']:
                    text_for_message += (f"{link}\n")

        else:
            '''...–∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–ø—É—Å –∏ –∫–∞–±–∏–Ω–µ—Ç'''
            if lesson['places'] is not None:
                if len(lesson['places']) == 1:
                    place = lesson['places'][0]
                    text_for_message += (
                        f"{place['office']} [{place['building']}]")

                    '''–¢–û–¢ –°–ê–ú–´–ô –ö–û–°–¢–´–õ–¨ –í–ù–ò–ó–£'''
                    if subgroup != "":
                        text_for_message += f", {subgroup} –ø.–≥.\n"
                    else:
                        text_for_message += "\n"
                    '''–ö–û–ù–ï–¶ –ö–û–°–¢–´–õ–Ø'''

                else:
                    text_for_message += f'–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç:\n'
                    for place in lesson['places']:
                        '''- –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é'''
                        text_for_message += (
                            f"{place['office']} [{place['building']}]")

                        '''–¢–û–¢ –°–ê–ú–´–ô –ö–û–°–¢–´–õ–¨ –í–ù–ò–ó–£'''
                        if subgroup != "":
                            text_for_message += f", {subgroup} –ø.–≥.\n"
                        else:
                            text_for_message += "\n"
                        '''–ö–û–ù–ï–¶ –ö–û–°–¢–´–õ–Ø'''

        '''–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –ø–∞—Ä–µ'''
        if lesson['additionalInfo'] is not None:
            for addInfo in lesson['additionalInfo']:
                text_for_message += (f"\n<i>–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ‚Äî {addInfo}</i> \n")

        text_for_message += "\n"
    return text_for_message


async def get_pair_count(lesson_list):
    count_pairs = 0
    for pair in lesson_list:
        if pair:
            count_pairs += 1
    return count_pairs


async def group_lessons_by_pair_number(lessons):
    last_pair = constant.number_of_pair_dict[lessons[- 1]["time"]['startTime']]
    # lessons_list_count = int(last_pair.replace('-–∞—è –ø–∞—Ä–∞', ''))
    lessons_list_count = constant.emoji_to_int_dict[last_pair]
    lesson_list: list[None | list[dict]] = [None] * lessons_list_count
    ''' –¢—É—Ç —è –¥–µ–ª–∞—é –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞—Ä–∞–º –∑–∞ –¥–µ–Ω—å, –≤ –Ω–µ–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é –≤ –º–∞—Å—Å–∏–≤–µ –ø–∞—Ä—ã
                –ü–æ—Ç–æ–º –∏–¥—É –ø–æ —ç—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É –∏ –ø—Ä–æ–≤–µ—Ä—è—é, 0 —Ç–∞–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å. –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å - —Ä–∞—Å–∫—Ä—ã–≤–∞—é –µ–≥–æ
                –ò–Ω–∞—á–µ –≤—ã–≤–æ–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∫–Ω–æ" '''
    for lesson in lessons:
        pair_index_string = constant.number_of_pair_dict[lesson["time"]["startTime"]]
        # pair_index = int(pair_index_string.replace('-–∞—è –ø–∞—Ä–∞', '')) - 1
        pair_index = constant.emoji_to_int_dict[pair_index_string] - 1

        if lesson_list[pair_index] is None:
            lesson_list[pair_index] = []

        lesson_list[pair_index].append(lesson)
    return lesson_list


async def get_lessons_without_header(lesson_list):
    text_for_message = ""
    is_pairs_start = False
    number_of_pair = 0
    for lessons_inner in lesson_list:
        if not is_pairs_start:
            if lessons_inner:
                is_pairs_start = True
        if not lessons_inner:
            if is_pairs_start:
                # text_for_message += f"<b>{number_of_pair + 1}-–∞—è –ø–∞—Ä–∞</b>"
                text_for_message += constant.int_to_emoji_dict[number_of_pair + 1]
                text_for_message += f" - –û–ö–ù–û ü™ü\n\n"

        else:
            for lesson in lessons_inner:
                text_for_message += get_lesson_as_string(lesson)
        number_of_pair += 1
    return text_for_message


async def get_lesson_message_header(count_pairs, day, is_session):
    if is_session:
        return f"<b>{day}</b>\n\n"
    else:
        return (f"<b>{day} ‚Äî "
                f"{constant.count_pairs_dict[count_pairs]}</b>\n\n")
